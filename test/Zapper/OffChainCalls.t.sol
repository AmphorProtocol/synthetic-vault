// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.19;

import "../../src/VaultZapper.sol";
import "../utils/SigUtils.sol";
import "../v0/Core/Global.t.sol";

struct Swap {
    address router;
    IERC20 tokenIn;
    IERC20 tokenOut;
    uint256 amount;
    uint256 minAmount;
    address tokenInWhale;
    uint256 slippage;
}

contract OffChainCalls is GlobalTest {
    address constant _router = 0x1111111254EEB25477B68fb85Ed929f73A960582;
    mapping(IERC20 => mapping(IERC20 => bytes)) callData;

    constructor() {
        callData[_DAI][_WSTETH] =
            hex"0502b1c50000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000001a2ee649ee2bf0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000003b6d0340c5578194d457dcce3f272538d1ad52c68d1ce8498b1ccac8";
        callData[_USDC][_WSTETH] =
            hex"e449022e0000000000000000000000000000000000000000000000000000000059682f0000000000000000000000000000000000000000000000000009911d9882a2ad63000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000018000000000000000000000004622df6fb2d9bee0dcdacf545acdb6a2b2f4f8638b1ccac8";
        callData[_ETH][_WSTETH] =
            hex"12aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000005615deb798bb3e4dfa0139dfa1b3d433cc23b72f0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000c1d2ee6150b37cc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007c00000000000000000000000000000000000000000000005e00003000001640607f39c581f595b53c5cb19bd0b3f8da6c935e2ca00020d6bdbf787f39c581f595b53c5cb19bd0b3f8da6c935e2ca080a06c4eca277f39c581f595b53c5cb19bd0b3f8da6c935e2ca01111111254eeb25477b68fb85ed929f73a960582000000008b1ccac8";
        callData[_USDT][_WSTETH] =
            hex"12aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000005615deb798bb3e4dfa0139dfa1b3d433cc23b72f000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000103c4cfaf70b37000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001750000000000000000000000000000000000000000000001570001290000df00a007e5c0d20000000000000000000000000000000000000000bb0000a100008b00004f02a0000000000000000000000000000000000000000000000000001269c19b68d8e1ee63c1e5109fcf8f5bd54db123470c96620441ca5c342a8bd4dac17f958d2ee523a2206206994597c13d831ec74101c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200042e1a7d4d000000000000000000000000000000000000000000000000000000000000000040607f39c581f595b53c5cb19bd0b3f8da6c935e2ca00020d6bdbf787f39c581f595b53c5cb19bd0b3f8da6c935e2ca000a0f2fa6b667f39c581f595b53c5cb19bd0b3f8da6c935e2ca000000000000000000000000000000000000000000000000000103c4f1bbda1d1000000000000000000082e941bcc487d80a06c4eca277f39c581f595b53c5cb19bd0b3f8da6c935e2ca01111111254eeb25477b68fb85ed929f73a96058200000000000000000000008b1ccac8";
        callData[_WBTC][_WSTETH] =
            hex"e449022e0000000000000000000000000000000000000000000000000000000002faf0800000000000000000000000000000000000000000000000006fab3a94493005e1000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000020000000000000000000000004585fe77225b41b697c938b018e2ac67ac5a20c0800000000000000000000000109830a1aaad605bbf02a9dfa7b0b92ec2fb7daa8b1ccac8";
        callData[_STETH][_WSTETH] =
            hex"12aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000ae7ab96520de3a18e5e111b5eaab095312d7fe840000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000005615deb798bb3e4dfa0139dfa1b3d433cc23b72f0000000000000000000000000000000000000000000000008ac7230489e8000000000000000000000000000000000000000000000000000079246bd50806299c000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b600000000000000000000000000000000000000000000009800006a00005051207f39c581f595b53c5cb19bd0b3f8da6c935e2ca0ae7ab96520de3a18e5e111b5eaab095312d7fe840004ea598cb000000000000000000000000000000000000000000000000000000000000000000020d6bdbf787f39c581f595b53c5cb19bd0b3f8da6c935e2ca080a06c4eca277f39c581f595b53c5cb19bd0b3f8da6c935e2ca01111111254eeb25477b68fb85ed929f73a960582000000000000000000008b1ccac8";
    }

    // function _getSavedSwapData(Swap memory swap)
    //     public
    //     view
    //     returns (bytes memory)
    // {
    //     return callData[swap.tokenIn][swap.tokenOut];
    // }

    function _getSwapData(address from, address to, Swap memory swap)
        public
        returns (bytes memory)
    {
        string[] memory inputs = new string[](8);
        inputs[0] = "node";
        inputs[1] = "./test/scripts/getOneInchQuote.js";
        inputs[2] = vm.toString(from);
        inputs[3] = vm.toString(to);
        inputs[4] = vm.toString(address(swap.tokenIn));
        inputs[5] = vm.toString(address(swap.tokenOut));
        inputs[6] = vm.toString(swap.amount);
        inputs[7] = vm.toString(swap.slippage);

        bytes memory res = vm.ffi(inputs);

        return res;
    }
}
